# -*- coding: utf-8 -*-
# helloworld.py
# hello world demo

import xbmc, xbmcgui
#import MySQLdb
import mysql.connector
import uuid
import time
import threading

class PlaySched:

#check the time, the file will be play

  def __init__(self):
    self.file = ''
    self.video = ''
    self.slid = ''
    self.telop =''
    self.image = ''
    self.flag = 0
    self.time = ''
    self.dir = '/mnt/usb/'

  def playfiles(self):
    #if self.telop != '':

    if self.slid != '':
      file_run = 'Slideshow(' + self.dir + 'poto_sample/' + self.file + '/)'
      print file_run
      xbmc.executebuiltin(file_run)
    
    if self.video != '':
      file_run = self.dir + 'video_sample/' + self.file
      print file_run
      xbmc.Player().play(file_run)                        	

  def playcheck(self,time):
    if time == self.time and self.flag == 0:
      return 1
    else:
      return 0
  def clean(self):
    self.file = ''
    self.flag = 0
    self.time = ''
 
#get actioncodes from https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/Key.h
ACTION_PREVIOUS_MENU = 10
MAX_PLAYSCHED_NUM = 120
 
class MySnClass(xbmcgui.WindowXML):
  def onInit(self):
    #self.strActionInfo = xbmcgui.ControlFadeLabel(0, 120, 1000, 200, 'font45caps_title', '0xFFFF00FF')
    self.strActionInfo = xbmcgui.ControlLabel(0, 120, 1000, 200, '', 'font45caps_title', '0xFFFF00FF')
    self.addControl(self.strActionInfo)
    self.strActionInfo.setLabel('Push BACK to quit Push BACK to quit Push BACK to quit Push BACK to quit')
    #self.strActionInfo.addLabel('Push BACK to quit Push BACK to quit Push BACK to quit Push BACK to quit')
    #self.strActionInfo.scroll(4)
    self.button0 = xbmcgui.ControlButton(250, 100, 80, 30, "HELLO")
    self.addControl(self.button0)
    self.button1 = xbmcgui.ControlButton(250, 200, 80, 30, "HELLO2")
    self.addControl(self.button1)
    self.button2 = xbmcgui.ControlButton(450, 200, 80, 30, "HELLO3")
    self.addControl(self.button2)
    self.setFocus(self.button0)
    self.button0.controlDown(self.button1)
    self.button1.controlUp(self.button0)
    self.button1.controlRight(self.button2)
    self.button2.controlLeft(self.button1)
    #self.telop = xbmcgui.ControlLabel(100, 120, 200, 200, '', 'font13', '0xFFFF00FF')
    
    #get ids of this player
    self.myuid = uuid.uuid1()
    self.cursor = conn.cursor()
    sql = "select * from player where Player_id=\""
    node = uuid.getnode()
    mac = uuid.UUID(int = node).hex[-12:]
    sql += str(mac)
    sql += "\""
    n = self.cursor.execute(sql)
    res = self.cursor.fetchall()
    print sql
    print res
    self.signUser_user_id = res[0][1]
    self.template_id = res[0][2]
    self.playSche_id = res[0][3]
    self.planNum = 0

    #init of the ps
    self.ps = [0]*MAX_PLAYSCHED_NUM
    for i in range(MAX_PLAYSCHED_NUM):
      self.ps[i] = PlaySched()

  def onAction(self, action):
    if action == ACTION_PREVIOUS_MENU:
      self.close()
 
  def onControl(self, control):
    if control == self.button0:
      self.message('you pushed the 1st button')
      self.strActionInfo.setLabel('TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!TEST!!')
    if control == self.button1:
      self.message('you pushed the 2nd button')
    if control == self.button2:
      self.message('you pushed the 3rd button')
 
  def message(self, message):
    dialog = xbmcgui.Dialog()
    dialog.ok(" My message title", message)

  def getPlaySche(self):
    i = 0
    sql = "select * from one_plan where playSche_id="
    sql += str(self.playSche_id)
    print sql
    self.cursor.execute(sql)
    res = self.cursor.fetchall()
    print "one_plan is", res 
    for row in res:
      iContents = row[6]
      self.ps[i].time = row[5]
      if iContents == 1:
        self.ps[i].telop = row[iContents]
      elif iContents == 2:
        self.ps[i].slid = row[iContents]
      elif iContents == 3:
        self.ps[i].video = row[iContents]
      i += 1
      self.planNum = i
    
  #def getVideo(self,id):

  def HasUpdate(self):
    return 0

conn=mysql.connector.connect(host="localhost",db="signdb",user="root",passwd="9999",charset="utf8")
mysn = MySnClass("Custom_Overlay1.xml", 'M:\\Documents and Settings\\inn\\Application Data\\XBMC\\addons\\', 'MySkin')
mysn.getPlaySche()

#main loop
def MyMainLoop():
  while 1:
    time.sleep(5)
    print "in the mainloop now!!"
    if mysn.HasUpdate() == 1:
      mysn.getPlaySche()
    print 'ps[0].time',mysn.ps[0].time
    i = 0
    allplayed = 1
    for i in range(mysn.planNum):
      if mysn.ps[i].playcheck(now) == 1:
	print 'checkOK!'
	mysn.ps[i].playfiles()
	mysn.ps[i].flag = 1
	#check if all files played
	if ps[i].flag == 0:
          allplayed = 0

#start the thread of mainloop 
t=threading.Thread(target=MyMainLoop)
t.setDaemon(True)
t.start()
#start the window
mysn.doModal()
del mysn
